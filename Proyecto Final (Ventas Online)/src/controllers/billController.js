"use strict"
const Bill = require("../models/billModel");
const ShoppingCar = require("../models/shoppingCarModel");
const User = require("../models/userModel");
const Product = require("../models/productModel");
const {validateData} = require("../utils/validate");

exports.test = (req, res) => {
    try {
        return res.send({message: "Corriendo"});
    } catch (error) {
        console.log(error);
        return error;
    }
}

//FUNCION PARA GENERAR COMPRA
exports.generateBill = async (req, res) => {
    try {
        const searchCar = await ShoppingCar.findOne({user: req.user.sub}).lean();
        const user = await User.findOne({_id: req.user.sub});
        //ESTAN LOS PRODUCTOS
        let productosFactura = searchCar.products;
        let total = searchCar.total;
        const data = {
            purchaseDate: new Date,
            user: req.user.sub,
            products: productosFactura,
            total: total
        }
        if(Object.entries(searchCar.products).length === 0){
            return res.send({message: "There is not products to add purchase."});
        }else{
            //CREACIÃ“N DE LA FACTURA
            let bill = new Bill(data);
            await bill.save();
            let clearcar = [];
            //LIMPIO EL ARREGLO DE PRODUCTOS PARA QUE EL CARRITO SE LIMPIE.
            const shoppingCarUpdated = await ShoppingCar.findOneAndUpdate({user: req.user.sub}, {products: clearcar, total: 0}, {new:true});
            //CONVERTIR EL ARREGLO PARA SABER SU LONGUITUD
            const searchFactura = await Bill.findOne({_id: bill._id}).lean();
            const arrayBooks = Object.entries(searchFactura.products);
            for(let i = 0; i < arrayBooks.length; i++){
                //OBTENGO EL ID Y CANTIDAD DEL PRODUCTO RECORRIENDO EL ARREGLO DE PRODUCTOS DE LA FACTURA.
                let idProduct = searchFactura.products[i].books.idBook;
                let quantity = searchFactura.products[i].books.quantity;
                //BUSCO EL PRODUCTO PARA PODER ACCEDER AL STOCK Y TOTAL SALES.
                let searchProduct = await Product.findOne({_id: idProduct}).lean();
                let stock = searchProduct.stock;
                let totalSales = searchProduct.totalSales;
                //ACTUALIZO EL PRODUCTO EN SUS CAMPOS CORRESPONDIENTES.
                let productUpdated = await Product.findOneAndUpdate({_id: idProduct}, {stock: (stock-quantity), totalSales: (totalSales+quantity)}, {new: true});
            }
            return res.send({message: `Bill generated by ${user.name} ${user.surname}`, bill});
        }
    } catch (error) {
        console.log(error);
        return error;
    }
}

//Listar todas las facturas que tiene un usuario.
exports.getBillsByUser = async (req, res) => {
    try {
        const idUser = req.params.id;
        const bills = await Bill.find({user: idUser});
        const user = await User.findOne({_id: idUser});
        if(bills){           
            return res.send({message: `${user.name} ${user.surname} bills.`, bills});                                      
        }else{
            return res.send({message: "You do not have bills to show."});
        }
    } catch (error) {
        console.log(error);
        return error;
    }
}

//Listar una factura por medio de su ID.
exports.getBillById = async (req, res) => {
    try {
        const idBill = req.params.id;
        const bill = await Bill.findOne({_id: idBill}).lean();
        if(bill){
            return res.send(bill);            
        }else{
            return res.send({message: "Bill does not found."});
        }
    } catch (error) {
        console.log(error);
        return error;
    }
}

exports.updateBill = async (req, res) => {
    try {
        const idBill = req.params.id;
        const searchBill = await Bill.findOne({_id: idBill}).lean();
        const formulario = req.body;
        if(searchBill){
            const data = {
                idBook: formulario.idBook,
                quantity: formulario.quantity
            }
            const msg = validateData(data);
            if(msg){
                return res.send(msg);
            }else{
                const arrayProducts = Object.entries(searchBill.products);
                for(let i = 0; i < arrayProducts.length; i++){
                    const idProduct = searchBill.products[i].books.idBook;
                    if(idProduct == formulario.idBook){
                        const product = await Product.findOne({_id: idProduct});
                        let stock = product.stock;
                        let totalSales = product.totalSales;
                        const productQuantity = searchBill.products[i].books.quantity;
                        //RESTABLECER LOS VALORES DEL PRODUCTO ANTES QUE SE REALIZARA DICHA COMPRA.
                        const searchProduct = await Product.findOneAndUpdate({_id: idProduct}, {stock: (stock + productQuantity), totalSales: (totalSales-productQuantity)}, {new: true});
                        
                        //VERIFICAR QUE LA CANTIDAD QUE SE MANDE SEA VALIDA CON RESPECTO AL STOCK GLOBAL DEL PRODUCTO.
                        if(searchProduct.stock >= formulario.quantity){
                            //ACTUALIZO LA FACTURA CON LOS VALORES INDICADOS EN EL INDICE QUE SE ENCUENTRA EN ESE MOMENTO.                
                            const updateBill = await Bill.findOneAndUpdate(
                                {_id: idBill, "products.books.idBook": idProduct},
                                {
                                    "$set": { 
                                        "products.$.books.quantity": formulario.quantity ,  
                                        "products.$.books.subTotal": (formulario.quantity*product.price)
                                    }
                                }
                            );

                            const productActual = await Product.findOne({_id: idProduct});
                            let stockActual = productActual.stock;
                            let totalSalesActual = productActual.totalSales;
                            //ACTUALIZO EL PRODUCTO QUE LE INDIQUE YA CON SU NUEVO STOCK Y TOTALSALES.
                            const productUpdated = await Product.findOneAndUpdate({_id: formulario.idBook}, {stock: (stockActual - formulario.quantity), totalSales: (totalSalesActual + formulario.quantity)}, {new: true});

                            //SUMO LOS SUBTOTALES PARA OBTENER EL NUEVO TOTAL
                            let total = 0;
                            const billFinal = await Bill.findOne({_id: idBill});
                            const arrayProductsFinal = Object.entries(billFinal.products);
                            for(let i = 0; i < arrayProductsFinal.length; i++){
                                total = total + billFinal.products[i].books.subTotal;
                            }
                            //ACTUALIZO EL TOTAL DE LA FACTURA CON LA SUMA TOTAL.
                            const updateBillFinal = await Bill.findOneAndUpdate({_id: idBill}, {total: total}, {new: true});
                            //RETORNO LA FACTURA YA ACTUALIZADA.
                            return res.send({message: "BILL UPDATED:", updateBillFinal});
                        }else{
                            return res.send({message: "We do not have enough products to update your bill."});
                        }
                    }else{
                        console.log("Wrong comparison");
                    }
                }
            }
        }else{
            return res.send({message: "Bill does not found."});
        }
    } catch (error) {
        console.log(error);
        return error;
    }
}